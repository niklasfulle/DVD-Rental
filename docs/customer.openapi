---
openapi: 3.0.3
info:
  title: DVD Rental Film API
  contact:
    name: Bernd MÃ¼ller
  version: "1.0"
servers:
- url: /dvd-rental-customer
paths:
  /resources:
    get:
      summary: Root of DVD Rental Customer
      description: Returns array of primary resources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /resources/addresses:
    get:
      summary: List of addressess
      description: Returns list of addresses (max 100)
      parameters:
      - name: limit
        in: query
        schema:
          format: int32
          default: 20
          type: integer
      - name: offset
        in: query
        schema:
          format: int32
          default: 0
          type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
    post:
      summary: Create a new address. Country and City must exist already.
      requestBody:
        description: The address data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      responses:
        "201":
          description: Address created.
          headers:
            Location:
              description: Location of created address
              style: simple
        "404":
          description: Country and/or City do not exist.
  /resources/addresses/{id}:
    get:
      summary: Get address with Id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: "The address with Id {id}."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        "404":
          description: Address not found.
  /resources/customers:
    post:
      summary: Create a new customer
      description: Create a new customer.
      parameters:
      - name: address
        in: query
        required: true
        schema:
          format: int32
          type: integer
          nullable: false
      - name: store
        in: query
        required: true
        schema:
          format: int32
          type: integer
          nullable: false
      requestBody:
        description: The customer data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          description: Customer created.
        "400":
          description: Bad customer data.
  /resources/customers/count:
    get:
      summary: Number of customers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                format: int32
                type: integer
  /resources/customers/{id}:
    get:
      summary: Get customer with Id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        default:
          description: "The customer with Id {id}."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "404":
          description: Customer not found.
  /resources/customers/{id}/payments:
    get:
      summary: Payments of customer with Id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        default:
          description: Payments of customer with Id
        "404":
          description: Customer not found
  /resources/payments:
    post:
      summary: Create payment
      requestBody:
        description: "Payment data (example: {\"amount\":33.3,\"rental\":1520,\"customer\"\
          :341,\"staff\":2,\"date\":\"2020-04-06 15:09\"})"
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Payment created.
          headers:
            Location:
              description: Location of created payment
              style: simple
        "400":
          description: "Only allowed: amount (decimal), customer (int), rental (int),\
            \ staff (int), date (yyyy-MM-dd HH:mm)"
        "404":
          description: Some involved entity does not exist. See message body.
  /resources/payments/{id}:
    get:
      summary: Get payment with Id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          description: "Payment with Id {id}."
          headers:
            Link:
              description: Link to created Payment
              style: simple
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        "404":
          description: Payment not found.
    delete:
      summary: Delete a payment (for accounting)
      description: "A reverse accounting entry is created, referenced by Header 'Link'."
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "204":
          description: Payment was deleted for accounting.
        "404":
          description: Payment not found.
components:
  schemas:
    Address:
      description: POJO that represents an address.
      required:
      - address
      - city
      - country
      - district
      - phone
      type: object
      properties:
        address:
          type: string
          nullable: false
        address2:
          type: string
        city:
          type: string
          nullable: false
        country:
          type: string
          nullable: false
        district:
          type: string
          nullable: false
        id:
          format: int32
          type: integer
        phone:
          type: string
          nullable: false
        postalCode:
          type: string
    AddressHref:
      type: object
      properties:
        href:
          type: string
    Customer:
      description: POJO that represents a customer.
      required:
      - activebool
      - firstName
      - lastName
      type: object
      properties:
        active:
          format: int32
          type: integer
        activebool:
          type: boolean
          nullable: false
        address:
          $ref: '#/components/schemas/AddressHref'
        createDate:
          format: date
          type: string
        email:
          type: string
        firstName:
          type: string
          nullable: false
        id:
          format: int32
          type: integer
        lastName:
          type: string
          nullable: false
        store:
          $ref: '#/components/schemas/StoreHref'
    CustomerHref:
      type: object
      properties:
        href:
          type: string
    Payment:
      description: POJO that represents a payment.
      required:
      - amount
      - rental
      - staff
      type: object
      properties:
        amount:
          type: number
          nullable: false
        customer:
          $ref: '#/components/schemas/CustomerHref'
        id:
          format: int32
          type: integer
        rental:
          allOf:
          - $ref: '#/components/schemas/RentalHref'
          - nullable: false
        staff:
          allOf:
          - $ref: '#/components/schemas/StaffHref'
          - nullable: false
    RentalHref:
      type: object
      properties:
        href:
          type: string
    StaffHref:
      type: object
      properties:
        href:
          type: string
    StoreHref:
      type: object
      properties:
        href:
          type: string
